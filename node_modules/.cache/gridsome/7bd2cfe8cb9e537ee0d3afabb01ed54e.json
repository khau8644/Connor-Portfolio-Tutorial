{"remainingRequest":"/Users/Keegan/Desktop/mywebsite/node_modules/babel-loader/lib/index.js??ref--1-1!/Users/Keegan/Desktop/mywebsite/node_modules/gridsome/app/page-query/index.js","dependencies":[{"path":"/Users/Keegan/Desktop/mywebsite/node_modules/gridsome/app/page-query/index.js","mtime":499162500000},{"path":"/Users/Keegan/Desktop/mywebsite/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Keegan/Desktop/mywebsite/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport cache from './cache';\nvar merge = Vue.config.optionMergeStrategies;\nexport default (function (_ref) {\n  var options = _ref.options;\n  var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (options.__pageQuery) {\n    options.__pageQuery = query;\n    return;\n  }\n\n  options.__pageQuery = query;\n  options.computed = merge.computed({\n    $page: function $page() {\n      return process.isServer ? this.$ssrContext.pageQuery.data : cache.get(this.$route.path);\n    }\n  }, options.computed);\n\n  if (process.isClient) {\n    var createRouteGuard = function createRouteGuard(hook) {\n      options[hook] = merge[hook]([createGuardFunc(options)], options[hook]);\n    };\n\n    var createGuardFunc = function createGuardFunc() {\n      return function (to, from, next) {\n        var error = function error() {\n          next({\n            name: '404',\n            params: {\n              0: to.path,\n              route: to\n            }\n          });\n        };\n\n        import(\n        /* webpackChunkName: \"page-query\" */\n        './fetch').then(function (m) {\n          m.default(to, options.__pageQuery).then(function () {\n            return next();\n          }).catch(function () {\n            return error();\n          });\n        });\n      };\n    };\n\n    createRouteGuard('beforeRouteEnter');\n    createRouteGuard('beforeRouteUpdate');\n  }\n});",{"version":3,"sources":["/Users/Keegan/Desktop/mywebsite/node_modules/gridsome/app/page-query/index.js"],"names":["Vue","cache","merge","config","optionMergeStrategies","options","query","__pageQuery","computed","$page","process","isServer","$ssrContext","pageQuery","data","get","$route","path","isClient","createRouteGuard","hook","createGuardFunc","to","from","next","error","name","params","route","then","m","default","catch"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,IAAMC,KAAK,GAAGF,GAAG,CAACG,MAAJ,CAAWC,qBAAzB;AAEA,gBAAe,gBAA+B;AAAA,MAA5BC,OAA4B,QAA5BA,OAA4B;AAAA,MAAjBC,KAAiB,uEAAT,IAAS;;AAC5C,MAAID,OAAO,CAACE,WAAZ,EAAyB;AACvBF,IAAAA,OAAO,CAACE,WAAR,GAAsBD,KAAtB;AACA;AACD;;AAEDD,EAAAA,OAAO,CAACE,WAAR,GAAsBD,KAAtB;AAEAD,EAAAA,OAAO,CAACG,QAAR,GAAmBN,KAAK,CAACM,QAAN,CAAe;AAChCC,IAAAA,KADgC,mBACvB;AACP,aAAOC,OAAO,CAACC,QAAR,GACH,KAAKC,WAAL,CAAiBC,SAAjB,CAA2BC,IADxB,GAEHb,KAAK,CAACc,GAAN,CAAU,KAAKC,MAAL,CAAYC,IAAtB,CAFJ;AAGD;AAL+B,GAAf,EAMhBZ,OAAO,CAACG,QANQ,CAAnB;;AAQA,MAAIE,OAAO,CAACQ,QAAZ,EAAsB;AACpB,QAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,IAAI,EAAI;AAC/Bf,MAAAA,OAAO,CAACe,IAAD,CAAP,GAAgBlB,KAAK,CAACkB,IAAD,CAAL,CAAY,CAACC,eAAe,CAAChB,OAAD,CAAhB,CAAZ,EAAwCA,OAAO,CAACe,IAAD,CAA/C,CAAhB;AACD,KAFD;;AAIA,QAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,aAAO,UAACC,EAAD,EAAKC,IAAL,EAAWC,IAAX,EAAoB;AACzB,YAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClBD,UAAAA,IAAI,CAAC;AACHE,YAAAA,IAAI,EAAE,KADH;AAEHC,YAAAA,MAAM,EAAE;AACN,iBAAGL,EAAE,CAACL,IADA;AAENW,cAAAA,KAAK,EAAEN;AAFD;AAFL,WAAD,CAAJ;AAOD,SARD;;AAUA;AAAO;AAAqC,iBAA5C,EAAuDO,IAAvD,CAA4D,UAAAC,CAAC,EAAI;AAC/DA,UAAAA,CAAC,CAACC,OAAF,CAAUT,EAAV,EAAcjB,OAAO,CAACE,WAAtB,EACGsB,IADH,CACQ;AAAA,mBAAML,IAAI,EAAV;AAAA,WADR,EAEGQ,KAFH,CAES;AAAA,mBAAMP,KAAK,EAAX;AAAA,WAFT;AAGD,SAJD;AAKD,OAhBD;AAiBD,KAlBD;;AAoBAN,IAAAA,gBAAgB,CAAC,kBAAD,CAAhB;AACAA,IAAAA,gBAAgB,CAAC,mBAAD,CAAhB;AACD;AACF,CA5CD","sourcesContent":["import Vue from 'vue'\nimport cache from './cache'\n\nconst merge = Vue.config.optionMergeStrategies\n\nexport default ({ options }, query = true) => {\n  if (options.__pageQuery) {\n    options.__pageQuery = query\n    return\n  }\n\n  options.__pageQuery = query\n\n  options.computed = merge.computed({\n    $page () {\n      return process.isServer\n        ? this.$ssrContext.pageQuery.data\n        : cache.get(this.$route.path)\n    }\n  }, options.computed)\n\n  if (process.isClient) {\n    const createRouteGuard = hook => {\n      options[hook] = merge[hook]([createGuardFunc(options)], options[hook])\n    }\n\n    const createGuardFunc = () => {\n      return (to, from, next) => {\n        const error = () => {\n          next({\n            name: '404',\n            params: {\n              0: to.path,\n              route: to\n            }\n          })\n        }\n\n        import(/* webpackChunkName: \"page-query\" */ './fetch').then(m => {\n          m.default(to, options.__pageQuery)\n            .then(() => next())\n            .catch(() => error())\n        })\n      }\n    }\n\n    createRouteGuard('beforeRouteEnter')\n    createRouteGuard('beforeRouteUpdate')\n  }\n}\n"]}]}